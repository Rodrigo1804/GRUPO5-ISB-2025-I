# -*- coding: utf-8 -*-
"""ECG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJd2INfO1k6lsTeLQPQBzMKsyb2hWzyf
"""

from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import numpy as np
import pywt
import matplotlib.pyplot as plt
from scipy.signal import resample

file_path = '/content/drive/MyDrive/Actividad física - 1ERA derivada.txt'

# CARGAR ARCHIVO OPENSIGNALS (se salta cabecera)
df = pd.read_csv(file_path, skiprows=7, delimiter='\t')

# REVISAR COLUMNAS DISPONIBLES
print("Columnas detectadas:", df.columns)

# SELECCIONAR UNA COLUMNA CON DATOS DE ECG (ej: penúltima si no hay etiquetas)
signal = df.iloc[:, -2].values

# FUNCIÓN DE SOFT THRESHOLDING
def soft_threshold(data, threshold):
    return np.sign(data) * np.maximum(np.abs(data) - threshold, 0)

# FUNCIÓN DE FILTRADO (Alfaouri & Daqrouq)
def ecg_denoise_wavelet(signal, wavelet='db4', level=5, C=5):
    coeffs = pywt.wavedec(signal, wavelet, level=level)
    cA = coeffs[0]
    cDs = coeffs[1:]
    sigma_nV = np.median(np.abs(cDs[-1])) / 0.6745
    cDs_thresh = []
    for d in cDs:
        sigma_dj = np.std(d)
        Tj = C * (sigma_dj / sigma_nV)
        d_thresh = soft_threshold(d, Tj)
        cDs_thresh.append(d_thresh)
    coeffs_thresh = [cA] + cDs_thresh
    signal_denoised = pywt.waverec(coeffs_thresh, wavelet)
    return signal_denoised[:len(signal)]

# FILTRAR LA SEÑAL
filtered = ecg_denoise_wavelet(signal)

# GRAFICAR RESULTADO
plt.figure(figsize=(12, 5))
plt.plot(signal, label='Señal original', alpha=0.6)
plt.plot(filtered, label='Señal filtrada', linewidth=2)
plt.title('Filtrado ECG - Wavelet (Alfaouri & Daqrouq, 2008)')
plt.xlabel('Muestras')
plt.ylabel('Amplitud')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import pywt
import matplotlib.pyplot as plt

file_path1 = '/content/drive/MyDrive/Actividad física - 1ERA derivada.txt'
file_path2 = "/content/drive/MyDrive/Inhalación 1 - 1ERA derivada - 2DA toma.txt"
file_path3 = "/content/drive/MyDrive/Inhalación 2 - 1ERA derivada - 2DA toma.txt"
file_path4 ="/content/drive/MyDrive/Reposo - 1ERA derivada - 2DA toma.txt"

# CARGAR ARCHIVO OPENSIGNALS
df1 = pd.read_csv(file_path1, skiprows=7, delimiter='\t')
df2 = pd.read_csv(file_path2, skiprows=7, delimiter='\t')
df3 = pd.read_csv(file_path3, skiprows=7, delimiter='\t')
df4 = pd.read_csv(file_path4, skiprows=7, delimiter='\t')



# SELECCIONAR LA SEÑAL
signal1 = df1.iloc[:, -2].values
signal2 = df2.iloc[:, -2].values
signal3 = df3.iloc[:, -2].values
signal4 = df4.iloc[:, -2].values

# FRECUENCIA DE MUESTREO (ajústala si conoces la real)
fs = 1000  # Hz
t1 = np.arange(len(signal1)) / fs  # vector de tiempo en segundos
t2 = np.arange(len(signal2)) / fs  # vector de tiempo en segundos
t3 = np.arange(len(signal3)) / fs  # vector de tiempo en segundos
t4 = np.arange(len(signal4)) / fs  # vector de tiempo en segundos

# SOFT THRESHOLDING
def soft_threshold(data, threshold):
    return np.sign(data) * np.maximum(np.abs(data) - threshold, 0)

# FILTRO WAVELET
def ecg_denoise_wavelet(signal, wavelet='db4', level=5, C=5):
    coeffs = pywt.wavedec(signal, wavelet, level=level)
    cA = coeffs[0]
    cDs = coeffs[1:]
    sigma_nV = np.median(np.abs(cDs[-1])) / 0.6745
    cDs_thresh = []
    for d in cDs:
        sigma_dj = np.std(d)
        Tj = C * (sigma_dj / sigma_nV)
        d_thresh = soft_threshold(d, Tj)
        cDs_thresh.append(d_thresh)
    coeffs_thresh = [cA] + cDs_thresh
    signal_denoised = pywt.waverec(coeffs_thresh, wavelet)
    return signal_denoised[:len(signal)]

# FILTRAR
filtered1 = ecg_denoise_wavelet(signal1)
filtered2 = ecg_denoise_wavelet(signal2)
filtered3 = ecg_denoise_wavelet(signal3)
filtered4 = ecg_denoise_wavelet(signal4)

# GRAFICAR
plt.figure(figsize=(14, 6))

plt.subplot(2, 1, 1)
plt.plot(t1, signal1, label='Actividad Física Señal original', color='steelblue')
plt.title('Señal Original Actividad Física Señal filtrada')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.subplot(2, 1, 2)
plt.plot(t1, filtered1, label='Actividad Física Señal filtrada', color='darkorange')
plt.title('Señal Filtrada Actividad Física Señal filtrada')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 6))

plt.subplot(2, 1, 1)
plt.plot(t2, signal2, label='Inhalación 1 Señal original', color='steelblue')
plt.title('Señal Original Inhalación 1')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.subplot(2, 1, 2)
plt.plot(t2, filtered2, label='Inhalación 1 Señal filtrada', color='darkorange')
plt.title('Señal Filtrada Inhalación 1')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 6))

plt.subplot(2, 1, 1)
plt.plot(t3, signal3, label='Inhalación 2 Señal original', color='steelblue')
plt.title('Señal Original Inhalación 2')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.subplot(2, 1, 2)
plt.plot(t3, filtered3, label='Inhalación 2 Señal filtrada', color='darkorange')
plt.title('Señal Filtrada Inhalación 2')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 6))

plt.subplot(2, 1, 1)
plt.plot(t4, signal4, label='Reposo Señal original', color='steelblue')
plt.title('Señal Original Reposo')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.subplot(2, 1, 2)
plt.plot(t4, filtered4, label='Reposo Señal filtrada', color='darkorange')
plt.title('Señal Filtrada Reposo')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)
plt.xlim([10, 20])

plt.tight_layout()
plt.show()